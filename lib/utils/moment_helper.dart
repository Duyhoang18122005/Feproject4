import 'dart:async';
import '../api_service.dart';

class MomentHelper {
  static int _unviewedCount = 0;
  static final StreamController<int> _unviewedCountController = StreamController<int>.broadcast();

  // Stream ƒë·ªÉ l·∫Øng nghe thay ƒë·ªïi s·ªë kho·∫£nh kh·∫Øc ch∆∞a xem
  static Stream<int> get unviewedCountStream => _unviewedCountController.stream;

  // L·∫•y s·ªë kho·∫£nh kh·∫Øc ch∆∞a xem hi·ªán t·∫°i
  static int get unviewedCount => _unviewedCount;

  // Th√™m listener cho s·ªë kho·∫£nh kh·∫Øc ch∆∞a xem
  static void addUnviewedCountListener(Function(int) listener) {
    _unviewedCountController.stream.listen(listener);
  }

  // T·∫£i s·ªë kho·∫£nh kh·∫Øc ch∆∞a xem t·ª´ server
  static Future<void> loadUnviewedCount() async {
    try {
      print('üîÑ MomentHelper: ƒêang g·ªçi API getUnviewedMomentsCount...');
      final count = await ApiService.getUnviewedMomentsCount();
      print('üìä MomentHelper: Nh·∫≠n ƒë∆∞·ª£c s·ªë kho·∫£nh kh·∫Øc ch∆∞a xem: $count');
      updateUnviewedCount(count);
    } catch (e) {
      print('‚ùå L·ªói t·∫£i s·ªë kho·∫£nh kh·∫Øc ch∆∞a xem: $e');
    }
  }

  // C·∫≠p nh·∫≠t s·ªë kho·∫£nh kh·∫Øc ch∆∞a xem
  static void updateUnviewedCount(int count) {
    print('üîÑ MomentHelper: C·∫≠p nh·∫≠t s·ªë kho·∫£nh kh·∫Øc t·ª´ $_unviewedCount th√†nh $count');
    _unviewedCount = count;
    _unviewedCountController.add(count);
    print('üì¢ MomentHelper: ƒê√£ g·ª≠i c·∫≠p nh·∫≠t qua stream');
  }

  // TƒÉng s·ªë kho·∫£nh kh·∫Øc ch∆∞a xem (khi c√≥ kho·∫£nh kh·∫Øc m·ªõi)
  static void incrementUnviewedCount() {
    updateUnviewedCount(_unviewedCount + 1);
  }

  // Gi·∫£m s·ªë kho·∫£nh kh·∫Øc ch∆∞a xem (khi xem kho·∫£nh kh·∫Øc)
  static void decrementUnviewedCount() {
    if (_unviewedCount > 0) {
      updateUnviewedCount(_unviewedCount - 1);
    }
  }

  // Reset s·ªë kho·∫£nh kh·∫Øc ch∆∞a xem v·ªÅ 0
  static void resetUnviewedCount() {
    updateUnviewedCount(0);
  }

  // Mark moment as viewed v√† c·∫≠p nh·∫≠t count
  static Future<void> markMomentAsViewed(int momentId) async {
    try {
      final success = await ApiService.markMomentAsViewed(momentId);
      if (success) {
        decrementUnviewedCount();
        print('‚úÖ MomentHelper: ƒê√£ mark moment $momentId as viewed');
      }
    } catch (e) {
      print('‚ùå MomentHelper: L·ªói mark moment as viewed: $e');
    }
  }

  // Mark all moments as viewed
  static Future<void> markAllMomentsAsViewed() async {
    try {
      final success = await ApiService.markAllMomentsAsViewed();
      if (success) {
        resetUnviewedCount();
        print('‚úÖ MomentHelper: ƒê√£ mark all moments as viewed');
      }
    } catch (e) {
      print('‚ùå MomentHelper: L·ªói mark all moments as viewed: $e');
    }
  }

  // Dispose stream controller
  static void dispose() {
    _unviewedCountController.close();
  }
} 